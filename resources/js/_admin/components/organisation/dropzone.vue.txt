<template>
    <div class="main-content">
        
        <b-row>
            <b-col md="12 mb-30">
                <b-card title="">
                 <b-col md="12">	 
											 
											<vue-dropzone 
												ref="myVueDropzone" 
												id="dropzone" 
												:options="dropzoneOptions"												
												@vdropzone-removed-file="rmfile"
												@vdropzone-success="afterComplete"
											>
											</vue-dropzone>
<br/>
                            <div class="" style="float:right">
							  <span class="input-group-btn" v-on:click="getImgaes">
								<a id="lfm"  class="btn btn-primary text-white">
								  <i class="fa fa-picture-o"></i> From Gallery
								</a>
							  </span>
							  <input id="thumbnail"  class="form-control" type="hidden" name="filepath" >
							</div>
                     <div id="holder" style="margin-top:15px;max-height:100px; display:none"></div>    				 
											 
							 </b-col>				 
                </b-card>
            </b-col>


         <!--  <b-button class="mt-3" type="button" variant="primary" v-on:click="populate">populate</b-button>-->

     <div id="alerts"></div>

         
            
        </b-row>
    </div>
</template>
<script>
  import Form from '@/_common/mixins/form.js';
  import vue2Dropzone from 'vue2-dropzone'
  import 'vue2-dropzone/dist/vue2Dropzone.min.css'
 import Modal from '@/_common/mixins/modal.js';

  import $ from 'jquery';
  
  $( document ).ready(function() {  
	  $('#thumbnail').change(function() {	
	   var url = $(this).val();
		vueEventBus.$emit('test', url);
		
	});
});


export default {
     metaInfo: {
    // if no subcomponents specify a metaInfo.title, this title will be used
    title: "Category Add"
  },components: {
    vueDropzone: vue2Dropzone,
	
  },
    data(){
        return{	
		dropzoneOptions: {
          url: '/../laravel-filemanager/upload',
          thumbnailWidth: 150,
         // maxFilesize: 0.5,
		 maxFiles: 1,
		  paramName:'upload',
		   addRemoveLinks: true,
		   dictRemoveFileConfirmation:  "Are you sure? You want to remove this?",
          headers: {
			'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
		}
      },
	  inputVal :null,
		 flag: {
                    modelState: 'UNMODIFIED'
                },
                observers: {},
				
		baseModel: {
                    name:null,
                    description: null,
                    base_price: null,
                    discount_price: null,
                    unit: null,
                    package_items_count: null,
                    weight: null,
                    featured: 0,
                    deliverable: 0,
					files:[],
                },
				model:null,
				
		columns: [
        {
          label: "Name",
          field: "name"
        },
        {
          label: "Code",
          field: "code"
        },
		 {
          label: "Front Type",
          field: "frontend_type"
        },
		{
          label: "Is Required",
          field: "is_required"
        },
        {
          label: "Button",
          field: "button",
          html: true,
          tdClass: "text-right",
          thClass: "text-right"
        }
      ],
      rows: [  ]
		         
       
        }
    },	
	
	 mounted: function() {

            var thisComponent = this;

            thisComponent._setupListeners();
		
	  
	
        },

	 methods: {
	 
	 rmfile:function(file, error, xhr){
	 
	 console.log(file);
	  var thisComponent = this;
	 
	// const valueToRemove = 'http://localhost/icook/icook/public/storage/files/71c6708f-123c-4033-b084-8195af68cb2c/bicycle.png';
	 const valueToRemove = file.url;
	
	 var venueToDeleteIndex = thisComponent.model.files.findIndex(venue => venue.file_url == valueToRemove);	
	
		thisComponent.model.files.splice(venueToDeleteIndex, 1);
		thisComponent.$forceUpdate();		

	 },
	  fileRemoved: function(file, error, xhr) {
	  
	   if(file){
		//console.log(file.upload.filename);
     }
    },
	  showModalNewAttribute(food_id,id) {

						var thisComponent = this;

						vueEventBus.$emit('prepare-modal-new-attribute', food_id,id);

		}, 
					
		removeAllFiles() {
		  this.$refs.dropzone.removeAllFiles();
		},			
	 afterComplete(file) {
	 var thisComponent = this;
	// console.log(file);
	 if(file){
		 // console.log(file.upload.filename);
		 // console.log(file.xhr.response);
		  
			var response=file.xhr.response;
			const obj = JSON.parse(response);
			
			
			thisComponent.model.files.push({
            file_name: file.upload.filename, 
            file_url:  obj.url,
			manuallyAddFile:  'no',
        })
			
		 /* if(obj.error){
		  
		   $('#alerts').append(
			  $('<div>').addClass('alert alert-warning')
				.append($('<i>').addClass('fas fa-exclamation-circle'))
				.append(' ' + obj.error.message)
			);
		
		  }else{
		
		  }*/

	  }
    },
	   _setupListeners: function() {

                var thisComponent = this;
                
                    thisComponent._initComponent()
                 
						
						vueEventBus.$on('test', function(url) {
						
						//showModal('modal-new-attribute', 'right');
							thisComponent.populate(url);
						});
						
						
            },
			 _setupObservers: function() {

							var thisComponent = this;

							//remove any existing watchers if present
							if (typeof(thisComponent.observers.unwatchModel) === 'function') {
								thisComponent.observers.unwatchModel();
							}

							//instantiate unwatcher for model observer
							thisComponent.observers.unwatchModel = thisComponent.$watch('model', {
								handler: function(newValue, oldValue) {
									thisComponent.flag.modelState = 'MODIFIED';
								},
								deep: true
							});

			},
			
			populate: function (url) {
			
				var thisComponent = this;
					var file = { size: 123, name: "Icon", type: "image/png", url: url };
					//var url = "http://staging.clientgorilla.com/assets/images/logo/clientgorilla-logo-color.png";
				   thisComponent.$refs.myVueDropzone.manuallyAddFile(file, url);
				   //thisComponent.model.files.push(url)
				   
				   thisComponent.model.files.push({
						file_name: 'Icon', 
						file_url:  url,
						manuallyAddFile:  'yes',
					})
				  
			},
			
			populateImage: function (url) {
			
				var thisComponent = this;
					var file = { size: 123, name: "Icon", type: "image/png", url: url };
					//var url = "http://staging.clientgorilla.com/assets/images/logo/clientgorilla-logo-color.png";
				   thisComponent.$refs.myVueDropzone.manuallyAddFile(file, url);
				   //thisComponent.model.files.push(url)
				   
				  
				  
			},
			getModel: function() {
               
                var thisComponent = this;

                thisComponent.formGetModel('food/'+thisComponent.id)
                    .then(function(response) {                    
                     
                       thisComponent.rows = response.data.data.attributes;                       
					   
					    _.each(response.data.data.files, function(role) {
                             thisComponent.populateImage(role.file_url);
                        });

                    })
                    .catch(function(error) {
                        console.log(error);
                    }); 
            },
				
				getImgaes: function () {

				var route_prefix = "/filemanager";
				$('#lfm').filemanager('image', {prefix: route_prefix});


					
				},
			
            _initComponent: function() {

                var thisComponent = this;

                //clone initial base model to working model
                thisComponent.model = _.cloneDeep(thisComponent.baseModel);

                //reset working model state to unmodified
                thisComponent.flag.modelState =  'UNMODIFIED';
				if(thisComponent.id){
				
				
						thisComponent.getModel();
					}
            },
			

			
        },
		 mixins: [
            Form
        ],
		props: [
			'id'
		]


		

}
//const input = this.$refs.email;


</script>
